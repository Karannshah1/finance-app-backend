spring.application.name=finance

#spring.datasource.url=jdbc:postgresql://localhost:5432/finance
#spring.datasource.username=postgres
#spring.datasource.password=karan
spring.sql.init.mode=always
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

# Only for production
# Map to the standard environment variables provided by Render's Postgres service
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}?sslmode=require
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
# Specify the PostgreSQL driver class explicitly
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true
server.port = 8091
logging.level.root=DEBUG
server.tomcat.remoteip.remote-ip-header=x-forwarded-for
server.tomcat.remoteip.protocol-header=x-forwarded-proto

spring.security.oauth2.client.registration.google.client-id=1023548068787-cheru2ur33ag9am1tpauobbpg4p3bk2a.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=openid,email,profile

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
jwt.secret=YourSuperSecretKeyMustBeAtLeast32CharsLong0923498123498798dfkjhk1203984__0=+1u34jkasdkf
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.data-source-properties.sslmode=require
jwt.expirationMs=3600000
server.forward-headers-strategy=NATIVE
# Increase the max header size to handle long OAuth2 callback URLs
server.tomcat.max-http-header-size=16KB
